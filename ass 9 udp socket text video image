import socket

# Server configuration
SERVER_IP = '0.0.0.0'  # Bind to all available interfaces
SERVER_PORT = 12345
BUFFER_SIZE = 4096
FILE_NAME = 'received_file'  # Name for the received file, can include extension

def receive_file():
    # Create a UDP socket
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    server_socket.bind((SERVER_IP, SERVER_PORT))
    print(f"Server is listening on port {SERVER_PORT}")

    # Open a file to write the received data
    with open(FILE_NAME, 'wb') as file:
        while True:
            # Receive file data in chunks
            data, client_address = server_socket.recvfrom(BUFFER_SIZE)
            if data == b'END':  # End of file transfer
                print("File transfer completed")
                break

            # Write received data to the file
            file.write(data)
            # Send acknowledgment for each chunk
            server_socket.sendto(b'ACK', client_address)
   
    print(f"File received and saved as {FILE_NAME}")

if __name__ == "__main__":
    receive_file()


client 
import socket
import os

# Client configuration
SERVER_IP = '127.0.0.1'  # Server IP (update to the actual server's IP if needed)
SERVER_PORT = 12345
BUFFER_SIZE = 4096
FILE_PATH = 'path_to_file/file_name.extension'  # Path to the file to be sent

def send_file():
    # Create a UDP socket
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    # Check if the file exists
    if not os.path.exists(FILE_PATH):
        print("File not found!")
        return

    # Open the file and send its data in chunks
    with open(FILE_PATH, 'rb') as file:
        while True:
            # Read a chunk of data
            data = file.read(BUFFER_SIZE)
            if not data:
                break  # End of file

            # Send data to the server
            client_socket.sendto(data, (SERVER_IP, SERVER_PORT))

            # Wait for acknowledgment
            client_socket.settimeout(2)
            try:
                ack, _ = client_socket.recvfrom(BUFFER_SIZE)
                if ack != b'ACK':
                    print("Error: No ACK received")
                    break
            except socket.timeout:
                print("Error: Timeout waiting for ACK")
                break

    # Send end-of-file signal
    client_socket.sendto(b'END', (SERVER_IP, SERVER_PORT))
    print("File transfer completed")

    # Close the client socket
    client_socket.close()

if __name__ == "__main__":
    send_file()
